scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library AuctionRegistrarLib

let oneMsg =
  fun(msg: Message) =>
    let nilMsg = Nil {Message} in
    Cons {Message} msg nilMsg

type Auction = 
| Auction of ByStr20 Uint128 BNum String
(* Leader, Current Bid, Ending Block, Label *)

let calcMinimumBid = 
  fun(increment: Uint128) => 
  fun(scale: Uint128) => 
  fun(currentBid: Uint128) =>
    let f1 = builtin add increment scale in
    let f2 = builtin div currentBid scale in
      builtin mul f1 f2

let calcEndingBlk =
  fun(minimumAuctionLength: Uint64) => 
  fun(blk: BNum) => 
  fun(endingBlk: BNum) =>
    let minAuctionEnding = builtin badd blk minimumAuctionLength in
    let isCurrentEndingBlkTooShort = 
      builtin blt endingBlk minAuctionEnding in
      match isCurrentEndingBlkTooShort with
      | True => minAuctionEnding
      | False => endingBlk
      end

(**********)
(* Events *)
(**********)

let eRunningSet =
  fun(running: Bool) =>
    {_eventname: "RunningSet"; running: running}

let eStart =
  fun(node: ByStr32) =>
  fun(bidder: ByStr20) =>
  fun(bid: Uint128) =>
  fun(endingBlk: BNum) =>
    {_eventname: "Start"; node: node; bidder: bidder; bid: bid; 
     endingBlk: endingBlk}

let eBid =
  fun(node: ByStr32) =>
  fun(bidder: ByStr20) =>
  fun(bid: Uint128) =>
  fun(endingBlk: BNum) =>
    {_eventname: "Bid"; node: node; bidder: bidder; bid: bid; 
     endingBlk: endingBlk}

let eClose =
  fun(node: ByStr32) =>
  fun(bidder: ByStr20) =>
  fun(bid: Uint128) =>
    {_eventname: "Close"; node: node; bidder: bidder; bid: bid}

contract AuctionRegistrar(
  owner: ByStr20,
  registry: ByStr20,
  increment: Uint128,
  ownedNode: ByStr32,
  scale: Uint128,
  minimumBid: Uint128,
  minimumAuctionLength: Uint64,
  initialAuctionLength: Uint64
)

field running: Bool = False
field auctions: Map ByStr32 Auction = Emp ByStr32 Auction 

transition onZNSRecordReceived(
  origin: ByStr20, 
  node: ByStr32, 
  parent: ByStr32, 
  label: String, 
  owner: ByStr20, 
  resolver: ByStr20
)
  accept;

  auctionExists <- exists auctions[node];

  match auctionExists with
  | True =>
    isRunning <- running;

    isOk = 
      let isOkAmount = builtin lt minimumBid _amount in
        andb isRunning isOkAmount;

    match isOk with
    | True =>
        blk <- & BLOCKNUMBER;
        newAuction = 
          let endingBlk = builtin badd blk initialAuctionLength in 
            Auction origin _amount endingBlk label;

        auctions[node] := newAuction;

        e = eStart node origin _amount endingBlk;
        event e
    | False =>
      msgs = 
        let msg = {_tag: ""; _recipient: origin; _amount: _amount} in
          oneMsg msg;
      send msgs
    end
  | False =>
    msgs = 
      let msg = {_tag: ""; _recipient: origin; _amount: _amount} in
        oneMsg msg;

    send msgs
  end
end

transition bid(node: ByStr32)
  maybeAuction <- auctions[node];

  match maybeAuction with
  | None =>
  | Some auction =>
    match auction with
    | Auction highestBidder currentBid endingBlk label =>
      blk <- & BLOCKNUMBER;

      isOk = 
        let minBid = calcMinimumBid increment scale currentBid in
        let isOkAmount = builtin lt minBid _amount in
        let isOkBlk = builtin blt blk endingBlk in
          andb isOkAmount isOkBlk;

      match isOk with
      | True =>
        newAuction = 
          let newEndingBlk = calcEndingBlk minimumAuctionLength blk endingBlk in
            Auction _sender _amount newEndingBlk label;

        auctions[node]:= newAuction;

        accept;

        e = eBid node _sender _amount newEndingBlk;
        event e;

        msgs = 
          let msg = {_tag: ""; _recipient: highestBidder; _amount: currentBid} in
            oneMsg msg;

        send msgs
      | _ =>
      end
    end
  end
end

transition close(node: ByStr32)
  maybeAuction <- auctions[node];

  match maybeAuction with
  | None =>
  | Some auction => 
    match auction with
    | Auction highestBidder currentBid endingBlk label => 
      blk <- & BLOCKNUMBER;
      isOkBlk = builtin blt endingBlk blk;

      match isOkBlk with
      | True =>
        delete auctions[node];
        e = eClose node highestBidder currentBid;

        msg = {_tag: "assign"; _recipient: registry; _amount: Uint128 0; 
              parent: ownedNode; label: label; owner: highestBidder};
        msgs = oneMsg msg;
        send msgs
      | _ => 
      end
    end
  end
end

transition setRunning(newRunning: Bool)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True => 
    running := newRunning;
    e = eRunningSet newRunning;
    event e
  | _ =>
  end
end

transition withdraw(recipient: ByStr20, amount: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    msg = {_tag: ""; _recipient: recipient; _amount: amount};
    msgs = oneMsg msg;
    send msgs
  | _ =>
  end
end