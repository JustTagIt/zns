scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library SimpleRegistrarLib

let oneMsg =
  fun(msg: Message) =>
    let nilMsg = Nil {Message} in
    Cons {Message} msg nilMsg

let zeroByStr20 = 0x0000000000000000000000000000000000000000

let eRegister =
  fun(node: ByStr32) =>
  fun(owner: ByStr20) =>
  fun(price: Uint128) =>
    {_eventname: "Register"; node: node; owner: owner; price: price}

let eLiPricePerUSDSet =
  fun(price: Uint128) =>
    {_eventname: "LiPricePerUSDSet"; price: price}

let eDefaultPriceUSDSet =
  fun(price: Uint128) =>
    {_eventname: "DefaultPriceUSDSet"; price: price}

let eLengthPriceUSDSet =
  fun(length: Uint32) =>
  fun(price: Uint128) =>
    {_eventname: "LengthPriceUSDSet"; length: length; price: price}

let eCustomPriceUSDSet =
  fun(node: ByStr32) =>
  fun(price: Uint128) =>
    {_eventname: "CustomPriceUSDSet"; node: node; price: price}

let eError =
  fun(message: String) =>
    {_eventname: "Error"; message: message}

contract SimpleRegistrar(
  registry: ByStr20,
  ownedNode: ByStr32,
  owner: ByStr20,
  initialDefaultPrice: Uint128,
  initialLiPerUSD: Uint128
)

(* Defines a currency conversion between USD and Li (a subunit of ZIL) *)
field liPerUSD: Uint128 = initialLiPerUSD
(* Defines a default price for all domains in USD *)
field defaultPriceUSD: Uint128 = initialDefaultPrice
(* Defines a custom price in USD for all domains with specific length *)
(* Prices defined by this field have higher priority than defaultPriceUSD *)
(* e.g {2 => 10, 3 => 15} would define that all two-symbol domains will be sold for 10 USD *)
(* and three-symbol domains for 15 USD *)
(* a key is used to specify the number of symbols in domain name *)
(* a value defines a price for the given length *)
field lengthPricesUSD: Map Uint32 Uint128 = Emp Uint32 Uint128
(* Defines a custom price a custom premium domain *)
(* Prices defined by this field have higher priority than any other definition field *)
(* a key is a name of the domain *)
(* a value defines a price for the given name *)
field customPricesUSD: Map ByStr32 Uint128 = Emp ByStr32 Uint128

(* Sets liPerUSD field *)
(* @ensures sender is an owner of the contract *)
(* @param newPrice a new value for the field *)
(* @emits LiPricePerUSDSet if the field was updated successfully *)
transition setLiPricePerUSD(newPrice: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    e = eLiPricePerUSDSet newPrice;
    event e;

    liPerUSD := newPrice
  | _ =>
  end
end

(* Sets defaultPriceUSD field *)
(* @ensures sender is an owner of the contract *)
(* @param newPrice a new value for the field *)
(* @emits DefaultPriceUSDSet if the field was updated successfully *)
transition setDefaultPriceUSD(newPrice: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    e = eDefaultPriceUSDSet newPrice;
    event e;

    defaultPriceUSD := newPrice
  | _ =>
  end
end

(* Sets a price for domains with given length *)
(* @ensures sender is an owner of the contract *)
(* @param length number of symbols in the domain name *)
(* @param newPrice a price for domains of the give length *)
(* @emits LengthPriceUSDSet if the price was updated successfully *)
transition setLengthPriceInUSD(length: Uint32, newPrice: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    e = eLengthPriceUSDSet length newPrice;
    event e;

    lengthPricesUSD[length] := newPrice
  | _ =>
  end
end

(* Sets a price for the given node (domain) *)
(* @ensures sender is an owner of the contract *)
(* @param node domain node address *)
(* @param newPrice a new fixed price for the domain *)
(* @emits CustomPriceUSDSet if the price was updated successfully *)
transition setCustomPriceInUSD(node: ByStr32, newPrice: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    e = eCustomPriceUSDSet node newPrice;
    event e;

    customPricesUSD[node] := newPrice
  | _ =>
  end
end

(* Purchases a domain and assigns it to the given origin *)
(* @accepts sent amount all the time *)
(* @ensures sender is a ZNS registry *)
(* @ensures sent amount is the right price of the domain *)
(* @param node domain node address *)
(* @param origin a buyer and new owner of the domain *)
(* @param parent an address of the parent node *)
(* @param label the new domain name *)
(* @sends money back to the origin if the price is incorrect *)
(* @sends bestow to the registry contract if the purchase is valid *)
(* @emits Register if the domain was purchased successfully *)
(* @emits Error if any of the check fails *)
transition register(
  origin: ByStr20, 
  node: ByStr32, 
  parent: ByStr32,
  label: String
)
  accept;

  maybeCustomPriceUSD <- customPricesUSD[node];
  labelLen = builtin strlen label;
  maybeLengthPriceUSD <- lengthPricesUSD[labelLen];
  currentDefaultPriceUSD <- defaultPriceUSD;
  currentLiPerUSD <- liPerUSD;

  price =
    let priceUSD = 
      match maybeCustomPriceUSD with
      | Some customPriceUSD => customPriceUSD
      | None => 
        match maybeLengthPriceUSD with
        | Some lenthPriceUSD => lenthPriceUSD
        | None => currentDefaultPriceUSD
        end
      end in
      builtin mul priceUSD currentLiPerUSD;

  isOk = 
    let isOkParent = builtin eq ownedNode parent in
    let isOkSender = builtin eq registry _sender in
    let isOkAmount = builtin eq price _amount in
    let isOkRequest = andb isOkSender isOkAmount in
      andb isOkParent isOkRequest;

  match isOk with
  | True => 
    e = eRegister node origin price;

    msgs = 
      let msg = {_tag: "bestow"; _recipient: registry; _amount: Uint128 0; 
                 parent: parent; label: label; owner: origin; 
                 resolver: zeroByStr20} in
        oneMsg msg;
    send msgs
  | False =>
    e = let m = "Not valid parent, record owner, amount or sender" in eError m;
    event e;

    msgs = let msg = {_tag: ""; _recipient: origin; _amount: _amount} in 
      oneMsg msg;
    send msgs
  end
end

(* Withdraws the money from the contract *)
(* @ensures sender is an owner *)
(* @param address to send the money *)
(* @param amount to withdraw *)
(* @sends money to the address *)
transition withdraw(address: ByStr20, amount: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    msgs = let msg = {_tag: ""; _recipient: address; _amount: _amount} in 
      oneMsg msg;
    send msgs
  | _ =>
  end
end
