scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library SimpleRegistrarLib

let oneMsg =
  fun(msg: Message) =>
    let nilMsg = Nil {Message} in
    Cons {Message} msg nilMsg

let zeroByStr20 = 0x0000000000000000000000000000000000000000

let eRegister =
  fun(node: ByStr32) =>
  fun(owner: ByStr20) =>
    {_eventname: "Register"; node: node; owner: owner}

let ePriceSet =
  fun(price: Uint128) =>
    {_eventname: "PriceSet"; price: price}

let eError =
  fun(message: String) =>
    {_eventname: "Error"; message: message}

contract SimpleRegistrar(
  registry: ByStr20,
  ownedNode: ByStr32,
  owner: ByStr20,
  initialPrice: Uint128
)

field price Uint128 = initialPrice

transition setPrice(price: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    e = ePriceSet price;
    event e;

    msgs = let msg = {_tag: ""; _recipient: address; _amount: _amount} in 
      oneMsg msg;
    send msgs
  | _ =>
  end
end

transition onZNSRecordReceived(
  origin: ByStr20, 
  node: ByStr32, 
  parent: ByStr32,
  label: String,
  owner: ByStr20,
  resolver: ByStr20
)
  accept;

  price <- price;

  isOk = 
    let isOkParent = builtin eq ownedNode parent in
    let isOkRecordOwner = builtin eq zeroByStr20 owner in
    let isOkZns = andb isOkRecordOwner isOkParent in
    let isOkSender = builtin eq registry _sender in
    let isOkAmount = builtin eq price _amount in
    let isOkRequest = andb isOkSender isOkAmount in
      andb isOkZns isOkRequest;

  match isOk with
  | True => 
    e = eRegister node origin;

    msgs = 
      let msg = {_tag: "assign"; _recipient: registry; _amount: Uint128 0; 
                 parent: parent; label: label; owner: origin} in
        oneMsg msg;
    send msgs
  | False =>
    e = let m = "Not valid parent, record owner, amount or sender" in eError m;
    event e;

    msgs = let msg = {_tag: ""; _recipient: origin; _amount: _amount} in 
      oneMsg msg;
    send msgs
  end
end

transition withdraw(address: ByStr20, amount: Uint128)
  isOkSender = builtin eq _sender owner;

  match isOkSender with
  | True =>
    msgs = let msg = {_tag: ""; _recipient: address; _amount: _amount} in 
      oneMsg msg;
    send msgs
  | _ =>
  end
end
