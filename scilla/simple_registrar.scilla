scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library SimpleRegistrarLib

let one_msg =
  fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let bystr20_zero = 0x0000000000000000000000000000000000000000

let event_Register =
  fun(node: ByStr32) =>
  fun(owner: ByStr20) =>
    {_eventname: "Register"; node: node; owner: owner}

contract SimpleRegistrar(
  registry: ByStr20,
  owned_node: ByStr32,
  owner: ByStr20,
  price: Uint128
)

transition onZNSRecordReceived(
  origin: ByStr20, 
  node: ByStr32, 
  parent: ByStr32,
  label: String,
  owner: ByStr20,
  resolver: ByStr20
)
  is_ok_parent = builtin eq owned_node parent;

  is_ok_record_owner = builtin eq bystr20_zero owner;

  is_ok_zns = andb is_ok_record_owner is_ok_parent;

  is_ok_sender = builtin eq registry _sender;

  is_ok = andb is_ok_zns is_ok_sender;

  match is_ok with
  | True => 
    e = event_Register node origin;

    msg = {_tag: "assign"; _recipient: registry; _amount: Uint128 0; 
           parent: node; label: label; owner: origin};
    msgs = one_msg msg;
    send msgs
  | False =>
    msg = {_tag: ""; _recipient: origin; _amount: _amount};
    msgs = one_msg msg;
    send msgs
  end
end

transition withdraw(recipient: ByStr20, amount: Uint128)
  is_ok_sender = builtin eq _sender owner;

  match is_ok_sender with
  | True =>
    msg = {_tag: ""; _recipient: recipient; _amount: amount};
    msgs = one_msg msg;
    send msgs
  | _ =>
  end
end
