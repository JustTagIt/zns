scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library SimpleRegistrarLib

let one_msg =
  fun(msg: Message) =>
    let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let bystr20_zero = 0x0000000000000000000000000000000000000000

(**********)
(* Events *)
(**********)

let event_Register =
  fun(node: ByStr20) =>
  fun(owner: ByStr20) =>
    {_eventname: "Register"; node: node; owner: owner}

contract SimpleRegistrar(
  registry: ByStr20,
  owner: ByStr20,
  price: Uint128
)

transition register(node: ByStr20, owner: ByStr20)
  is_ok_sender = builtin eq registry _sender;

  is_ok_amount = builtin eq _amount price;
  
  is_ok_record_owner = builtin eq bystr20_zero owner;

  is_ok_amount_and_sender = andb is_ok_amount is_ok_sender;

  is_ok = andb is_ok_amount_and_sender is_ok_record_owner;

  match is_ok with
  | True => 
    accept;

    e = event_Register node _sender;

    msg = {_tag: "configureOwner"; _recipient: registry; _amount: Uint128 0; node: node; new_owner: _sender};
    msgs = one_msg msg;
    send msgs
  | _ => 
  end
end
