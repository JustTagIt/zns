scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library KeepAliveBackupLib

let oneMsg =
  fun(msg: Message) =>
    let nilMsg = Nil {Message} in
    Cons {Message} msg nilMsg

let eNewTOD = 
  fun(tod: BNum) => 
    {_eventname: "NewTOD"; tod: tod}

let eBackup = 
  fun(node: ByStr32) => 
    {_eventname: "Backup"; node: node}

let eError =
  {_eventname: "Error"}

contract KeepAliveBackup(
  backup: ByStr20,
  owner: ByStr20,
  registry: ByStr20
)

field tod: BNum = BNum 0

transition heartbeat(time: Uint64)
  isOkOwner = builtin eq owner _sender;

  match isOkOwner with
  | True => 
    blk <- & BLOCKNUMBER;
    newTOD = builtin badd blk time;
    tod := newTOD;

    e = eNewTOD newTOD;
    event e
  | False =>
  end
end

transition backup(node: ByStr32)
  currentTOD <- tod;

  isInitialized = let bn = BNum 0 in builtin eq currentTOD bn;

  match isInitialized with 
  | True => 
    blk <- & BLOCKNUMBER;

    isOk =
      let isOkBlk = builtin blt blk currentTOD in 
      let isOkOwner = builtin eq owner _sender in
        andb isOkBlk isOkOwner;

    match isOk with
    | True =>
      e = eBackup node;
      event e;

      msgs = let m = {_tag: "transfer"; _recipient: registry; 
                      _amount: Uint128 0; node: node; owner: backup} in
        oneMsg m;
      send msgs
    | False => 
      event eError
    end
  | False => 
    event eError
  end
end
