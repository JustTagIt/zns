scilla_version 0

import BoolUtils

library ResolverLib

let eRecordSetFor =
  fun(owner: ByStr20) =>
  fun(key: String) =>
  fun(value: ByStr) =>
    {_eventname: "RecordSetFor"; owner: owner; key: key; value: value}

let eRecordUnsetFor =
  fun(owner: ByStr20) =>
  fun(key: String) =>
    {_eventname: "RecordUnsetFor"; owner: owner; key: key}

let eCleared =
  fun(owner: ByStr20) =>
    {_eventname: "Cleared"; owner: owner}

let eOwnerSet =
  fun(owner: ByStr20) =>
    {_eventname: "OwnerSet"; owner: owner}

contract Resolver(
  initialOwner: ByStr20
)

field records: Map ByStr20 (Map ByStr32 (Map String ByStr)) = Emp ByStr20 (Map ByStr32 (Map String ByStr)) 
field owner: ByStr20 = initialOwner

transition setOwner(newOwner: ByStr20)
  currentOwner <- owner;
  isOkOwner = builtin eq currentOwner _sender;
  match isOkOwner with
  | True =>
    owner := newOwner;

    e = eOwnerSet newOwner;
    event e
  | False =>
  end
end

transition link(id: Uint128, node: ByStr32)
end

transition set(id: Uint128, key: String, value: ByStr)
end

transition unset(id: Uint128, key: String, value: ByStr)
end

transition clear(id: Uint128)
end


transition set(key: String, value: ByStr)
  records[_sender][key] := value;
  e = eRecordSetFor _sender key value;
  event e
end

transition unset(key: String)
  delete records[_sender][key];
  e = eRecordUnsetFor _sender key;
  event e
end

transition clear()
  delete records[_sender];
  e = eCleared _sender;
  event e
end

