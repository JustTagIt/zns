scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library MarketplaceLib

let nilMessage = Nil {Message}
let zeroByStr20 = 0x0000000000000000000000000000000000000000

let oneMsg =
  fun(msg: Message) =>
    Cons {Message} msg nilMessage

let eOffer =
  fun(node: ByStr32) =>
  fun(price: Uint128) =>
    {_eventname: "Offer"; node: node; price: price}

let eOfferCanceled =
  fun(node: ByStr32) =>
    {_eventname: "OfferCanceled"; node: node}

let eSold =
  fun(buyer: ByStr20) =>
  fun(node: ByStr32) =>
  fun(price: Uint128) =>
    {_eventname: "Sold"; buyer: buyer; node: node; price: price}

let parentLabelToNode = 
  fun(parent: ByStr32) =>
  fun(label: String) =>
    let labelHash = builtin sha256hash label in
    let nodeInput = builtin concat parent labelHash in
      builtin sha256hash nodeInput

contract Marketplace(
  seller: ByStr20, 
  registry: ByStr20,
  zone: ByStr32
)

(* sale offers are stored by ZNS node *)
field offers: Map ByStr32 Uint128 = Emp ByStr32 Uint128

(* We use buyerTmp to store the buyer address while transfer is being executed *)
field buyerTmp: ByStr20 = zeroByStr20

(* Make or reset an offer to sell a node you own *)
(* @param node *)
(* @param price *)
(* @emits Offer to track current offers *)
transition offer(parent: ByStr32, label: String, price: Uint128)
  node = parentLabelToNode parent label;
  isOk = 
    let isSenderOk = builtin eq _sender seller in
    let isParentOk = builtin eq zone parent in
      andb isSenderOk isParentOk;

  match isOk with
  | True =>
    offers[node] := price;

    e = eOffer node price;
    event e
  | False =>
  end
end

(* Delete an offer to sell a node you own *)
(* @param node *)
(* @param price *)
(* @emits Offer to track current offers *)
transition cancelOffer(node: ByStr32)
  isOk = builtin eq _sender seller;

  match isOk with
  | True =>
    delete offers[node];

    e = eOfferCanceled node;
    event e
  | False =>
  end
end

(* Purchase a name from a specified seller *)
(* @ensures node is offered for sale *)
(* @ensures _sender matched the sellers offer on the node *)
(* @param node *)
(* @sends transfer to the registry if enough payment *)
transition buy(node: ByStr32)

  buyerTmp := _sender;
  maybeOffer <- offers[node];

  offerMatchsAmount =
    match maybeOffer with
    | None => False
    | Some listing => builtin eq listing _amount
    end;

  match offerMatchsAmount with
  | True =>
    accept;
    msgs =
      let m = {_tag: "transfer"; _recipient: registry; _amount: Uint128 0;
               node: node; owner: _sender}
        in oneMsg m;
    send msgs
    | False =>
  end
end

(* The callback that is exicuted when the transfer is successful *)
(* @ensures _sender is the registry *)
(* @param node *)
(* @param owner *)
(* @emits Sold event to notify of a successful sale *)
(* @sends money earned in sale to sender *)
(* @notice we send _balance to ensure that bouced onTransferFailure calls dont get lost *)
transition onTransferSuccess(node: ByStr32, owner: ByStr20)
  isOk = builtin eq _sender registry;

  match isOk with
  | True => 
    maybeOffer <- offers[node];
    price = 
      match maybeOffer with
      | None => Uint128 0
      | Some listing => listing
      end;
    delete offers[node];

    e = eSold owner node price;
    event e;

    balance <- _balance;

    msgs =
      let m = {_tag: ""; _recipient: seller; _amount: balance} in oneMsg m;
    send msgs
  | False => 
  end
end

(* The callback that is exicuted when the transfer fails *)
(* @ensures _sender is the registry *)
(* @param node *)
(* @param owner *)
(* @emits Sold event to notify of a successful sale *)
(* @sends refunds buyer *)
transition onTransferFailure(node: ByStr32, owner: ByStr20)
  isOk = builtin eq _sender registry;

  match isOk with
  | True =>
    buyer <- buyerTmp;
    maybeOffer <- offers[node];
    price = 
      match maybeOffer with
      | None => Uint128 0
      | Some listing => listing
      end;

    msgs =
      let m = {_tag: ""; _recipient: buyer; _amount: price} in oneMsg m;
    send msgs
  | False => 
  end
end
