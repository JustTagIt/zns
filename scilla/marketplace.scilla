scilla_version 0

import BoolUtils IntUtils ListUtils NatUtils PairUtils

library MarketplaceLib

let nilMessage = Nil {Message}
let zeroByStr20 = 0x0000000000000000000000000000000000000000

let oneMsg =
  fun(msg: Message) =>
    Cons {Message} msg nilMessage

let eOffer =
  fun(seller: ByStr20) =>
  fun(node: ByStr32) =>
  fun(price: Uint128) =>
    {_eventname: "Offer"; seller: seller; node: node; price: price}

let eOfferCanceled =
  fun(seller: ByStr20) =>
  fun(node: ByStr32) =>
    {_eventname: "OfferCanceled"; seller: seller; node: node}

let eSold =
  fun(buyer: ByStr20) =>
  fun(seller: ByStr20) =>
  fun(node: ByStr32) =>
  fun(price: Uint128) =>
    {_eventname: "Sold"; buyer: buyer; seller: seller; node: node; price: price}

contract Marketplace(registry: ByStr20)

field offers: Map ByStr20 (Map ByStr32 Uint128) = Emp ByStr20 (Map ByStr32 Uint128)
field lastSeller: ByStr20 = zeroByStr20
field lastBuyer: ByStr20 = zeroByStr20

transition offer(node: ByStr32, price: Uint128)
  offers[_sender][node] := price;

  e = eOffer _sender node price;
  event e
end

transition canceledOffer(node: ByStr32)
  delete offers[_sender][node];

  e = eOfferCanceled _sender node;
  event e
end

transition buy(node: ByStr32, seller: ByStr20)
  accept;

  lastSeller := seller;
  lastBuyer := _sender;
  maybeOffer <- offers[seller][node];

  offerMatchsAmount = 
    match maybeOffer with
    | None => False
    | Some listing => builtin eq listing _amount
    end;

  match offerMatchsAmount with
  | True =>
    msgs =
      let m = {_tag: "transfer"; _recipient: registry; _amount: Uint128 0;
               node: node; owner: _sender}
        in oneMsg m;
    send msgs
    | False =>
  end
end

transition onTransferSuccess(node: ByStr32, owner: ByStr20)
  isOk = builtin eq _sender registry;

  match isOk with
  | True => 
    seller <- lastSeller;
    maybeOffer <- offers[seller][node];
    price = 
      match maybeOffer with
      | None => Uint128 0
      | Some listing => listing
      end;

    e = eSold owner seller node price;
    event e;

    msgs =
      let m = {_tag: ""; _recipient: seller; _amount: price} in oneMsg m;
    send msgs
  | False => 
  end
end

transition onTransferFailure(node: ByStr32, owner: ByStr20)
  isOk = builtin eq _sender registry;

  match isOk with
  | True =>
    buyer <- lastBuyer;
    seller <- lastSeller;
    maybeOffer <- offers[seller][node];
    price = 
      match maybeOffer with
      | None => Uint128 0
      | Some listing => listing
      end;
    delete offers[seller][node];

    msgs =
      let m = {_tag: ""; _recipient: buyer; _amount: price} in oneMsg m;
    send msgs
  | False => 
  end
end
